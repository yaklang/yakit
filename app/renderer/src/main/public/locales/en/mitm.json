{
  "MITMPage": {
    "mitmServerStopped": "MITM Hijack Server Stopped",
    "mitmServerErrorOrStopped": "MITM Hijack Server Error or Stopped",
    "startMitmServerError": "Start MITM Server ERROR!",
    "startMitmFailed": "Failed to start MITM hijack:",
    "or": "or"
  },
  "MITMServerStartForm": {
    "getRuleListFailed": "Failed to get rule list:",
    "confirmEnableWithReplacementRules": "Replacement rules are enabled, which may affect hijacking. Are you sure you want to enable?",
    "goToSettings": "Go to Settings",
    "currentMitmVersion": "Currently using MITM v1 version",
    "hijackProxyListenHost": "Hijack Proxy Listen Host",
    "remoteModeTip": "In remote mode, you can change it to 0.0.0.0 to listen on all network interfaces of the host",
    "hijackProxyListenPort": "Hijack Proxy Listen Port",
    "downstreamProxy": "Downstream Proxy",
    "upstreamProxyTip": "Set another proxy for requests passing through this MITM proxy. Typically used to access websites inaccessible from mainland China or to access special networks/intranets. It can also be used for passive scanning. If the proxy requires a password, the format is: http://user:pass@ip:port",
    "configureProxyAuth": "Configure Proxy Authentication",
    "proxyAddressExample": "E.g. http://127.0.0.1:7890 or socks5://127.0.0.1:7890",
    "http2Support": "HTTP/2.0 Support",
    "http2SupportTip": "Enabling this option will support HTTP/2.0 hijacking. If disabled, it will automatically downgrade to HTTP/1.1. Automatic downgrade also occurs if HTTP/2 negotiation fails after enabling.",
    "httpsConfig": "HTTPS Config",
    "gmTlsHijackTip": "Adapts to GM algorithm TLS (GM-tls) hijacking, initiating a GM TLS connection to the target website (Guomi is Chinese national standard)",
    "randomizeClientHelloTip": "Randomize the ClientHello message during access to evade server detection of TLS fingerprints (TLS fingerprint is a characteristic method used to identify and categorize SSL/TLS clients by analyzing the handshake information sent by the client when establishing a secure connection)",
    "noGmAndRandomTlsFingerprint": "Do not configure GM and random TLS fingerprint",
    "randomTLSFingerprint": "Random TLS Fingerprint",
    "default": "Default",
    "guomi": "GM",
    "disableHijackKeepAlive": "Disable Hijack Keep-Alive",
    "mitmDisableKeepAlive": "MITM hijack disables keep-alive. Each hijacked connection will automatically close after processing one request/response.",
    "contentRules": "Content Rules",
    "applyRules": "Apply rules for matching, replacing, tagging, and coloring, and configure the effect location",
    "defaultConfig": "Default Config",
    "existingRulesCount": "Existing rules: {count}",
    "enablePlugin": "Enable Plugin",
    "hijackStart": "Start Hijack",
    "mitmHijackV2": "MITM Hijack v2",
    "advancedConfig": "Advanced Config"
  },
  "MITMFormAdvancedConfiguration": {
    "advancedConfig": "Advanced Config",
    "certificateFileName": "{CerName}-certificate.json",
    "saveAdvancedConfigConfirm": "Do you want to save the advanced configuration and close the modal?",
    "dnsServer": "DNS Server",
    "customDNSServer": "Specify DNS Server",
    "exampleIP": "E.g. 1.1.1.1",
    "hostsConfig": "Hosts Config",
    "addHostsMapping": "Add Hosts Mapping",
    "gmTLSPriority": "GM TLS Priority",
    "gmTLSPriorityTip": "Enabling this option will prioritize GM TLS. If the connection fails, it will automatically downgrade to standard TLS. If disabled, standard TLS is prioritized.",
    "gmTLSOnly": "GM TLS Only",
    "gmTLSOnlyTip": "When this option is enabled, other secure transport layers besides GM algorithm TLS will not be supported.",
    "proxyAuthentication": "Proxy Authentication",
    "hijackProxyAuthTip": "Enable authentication for the hijack proxy. You need to configure proxy authentication information in the proxy client.",
    "proxyAuthUsername": "Proxy Auth Username",
    "proxyAuthPassword": "Proxy Auth Password",
    "filterWebSocket": "Filter WebSocket",
    "disableHomePage": "Disable Initial Page",
    "disableHomePageTip": "When enabled, the proxy-free launch will not visit the initial page.",
    "enableWebSocketCompression": "Enable WebSocket Compression",
    "pluginConcurrentProcesses": "Plugin Concurrent Processes",
    "clientTLSImport": "Client TLS Import",
    "clientTLSImportTip": "Used for capturing traffic of HTTPS websites that enable client verification for mTLS (Mutual TLS).",
    "filter": "Filter",
    "certificateDownload": "Certificate Download"
  },
  "MITMHijackedContent": {
    "listening": "Listening...",
    "getMitmFiltersFailed": "Failed to get MITM filters:",
    "deleteFilterContainsAllFailed": "Failed to delete all content in filter inclusions:",
    "enableAllNoReplaceRuleSuccess": "Successfully enabled the rule \"All No Replace\" button",
    "closeFailed": "Close failed",
    "getRulesListFailed": "Failed to get rules list:",
    "replaceRule": "Replace Rule",
    "filter": "Filter",
    "getHijackFilterFailed": "Failed to get Conditional Hijack filter:",
    "mitmErrorInvalidResponse": "BUG: MITM Error, failed to get the correct Response or Response ID",
    "triggeredConditionalHijack": "Conditional Hijack triggered",
    "hijackAllResponseContent": "Hijack all response content",
    "hijackRequestOnly": "Hijack request only",
    "refreshSuccess": "Refresh successful",
    "autoAllowRequestsTip": "When checked, all requests will be allowed by default, and the corresponding responses will be hijacked",
    "responseOnly": "Response Only",
    "batchAllow": "Batch Allow",
    "batchDiscard": "Batch Discard",
    "batchHijackResponse": "Batch Hijack Response",
    "allowAll": "Allow All",
    "manualHijack": "Manual Hijack",
    "conditionalHijack": "Conditional Hijack",
    "autoAllow": "Auto Allow",
    "passiveLog": "Passive Log",
    "plugin_check_tip": "Detected configuration of <openReplace/> and <openWhite/> whitelist. If there are packet capture issues, you can first <close/> <tooltip/> the configuration. Detected loading of {{pluginCount}} plugins. If there are packet capture issues, you can click <clear/> to cancel loading plugins.",
    "closeEnableAllNoReplaceRuleTip": "Disabling will enable the rule \"All No Replace\" button and delete all content in filter inclusions",
    "plugin_config_tip": "Detected configuration of <openReplace/> and <openWhite/> whitelist. If there are packet capture issues, you can first <close/> <tooltip/> the configuration.",
    "close_rule_tip": "Disabling will enable the rule \"All No Replace\" button and delete all content in filter inclusions",
    "plugin_white_filter_tip": "Detected configuration of <openWhite/> whitelist. If there are packet capture issues, you can first <close/> <tooltip/> the whitelist setting. Detected loading of {{pluginCount}} plugins. If there are packet capture issues, you can click <clear/> to cancel loading plugins.",
    "close_filter_tip": "Disabling will delete all content in filter inclusions",
    "plugin_replace_rule_tip": "Detected configuration of <openReplace/>. If there are packet capture issues, you can first <close/> <tooltip/> the replacement. Detected loading of {{pluginCount}} plugins. If there are packet capture issues, you can click <clear/> to cancel loading plugins.",
    "close_rule_tip2": "Disabling will enable the \"All No Replace\" button",
    "plugin_white_filter_tip_simple": "Detected configuration of <openWhite/>. If there are packet capture issues, you can first <close/> <tooltip/> the whitelist setting.",
    "close_filter_tip2": "Disabling will delete all content in filter inclusions",
    "plugin_replace_rule_tip_simple": "Detected configuration of <openReplace/>. If there are packet capture issues, you can first <close/> <tooltip/> the replacement.",
    "close_rule_tip3": "Disabling will enable the \"All No Replace\" button",
    "plugin_loaded_tip": "Detected loading of {{pluginCount}} plugins. If there are packet capture issues, you can click <clear/> to cancel loading plugins."
  },
  "MITMManual": {
    "triggeredConditionalHijack": "Conditional Hijack Triggered",
    "arrivalOrder": "Arrival Order",
    "status": "Status",
    "method": "Method",
    "markColor": "Mark Color",
    "hijackResponseAction": "Hijack Response",
    "request": "Request",
    "response": "Response",
    "releaseWithStatus": "Release {getStatusStr}",
    "discardWithStatus": "Discard {getStatusStr}"
  },
  "MITMV2ManualEditor": {
    "switchToAutoHijackMode": "Switch to Auto Hijack Mode",
    "allowData": "Allow Data",
    "discardData": "Discard Data",
    "hijackThisResponse": "Hijack This Response",
    "render": "Render",
    "response": "Response",
    "request": "Request",
    "hijackResponseAction": "Hijack Response",
    "discard": "Discard",
    "allow": "Allow",
    "waitingForHijack": "Waiting for Hijack",
    "wsHijack": "WS Hijack",
    "hijackRequest": "Hijack Request"
  },
  "MITMManualEditor": {
    "switchToAutoHijackMode": "Switch to Auto Hijack Mode",
    "allowThisHttpResponse": "Allow This HTTP Response",
    "discardThisHttpResponse": "Discard This HTTP Response",
    "hijackResponseOfRequest": "Hijack Response of Request",
    "listening": "Listening..."
  },
  "MITMManualHeardExtra": {
    "labelColor": "Label Color:",
    "none": "None",
    "hijackResponse": "Hijack Response:",
    "discardData": "Discard Data",
    "submitData": "Submit Data"
  },
  "ManualUrlInfo": {
    "targetListening": "Target: Listening...",
    "target": "Target:",
    "response": "Response",
    "request": "Request",
    "httpResponse": "HTTP Response",
    "httpRequest": "HTTP Request"
  },
  "MITMLogHeardExtra": {
    "advancedFilter": "Filter",
    "configured": "Configured",
    "processFilter": "Process Filter"
  },
  "MITMServerHijacking": {
    "startInitialMitmPluginSuccess": "Initial MITM Plugin started successfully",
    "stopMitmFailed": "Failed to stop MITM hijack:",
    "hijackHttpRequest": "Hijack HTTP Request",
    "filterWebSocket": "Filter WebSocket:",
    "downstreamProxy": "Downstream Proxy",
    "ruleConfig": "Rule Config",
    "filter": "Filter",
    "certificateDownload": "Certificate Download",
    "gmTLSOnly": "GM TLS Only",
    "enableProxyAuth": "Enable Proxy Authentication"
  },
  "DownStreamAgentModal": {
    "downstreamProxy": "Downstream Proxy",
    "configureProxyAuth": "Configure Proxy Authentication",
    "proxyAddressExample": "E.g. http://127.0.0.1:7890 or socks5://127.0.0.1:7890"
  },
  "MITMFiltersModal": {
    "mitmFilterResetCommandSent": "MITM filter reset command sent",
    "updateMitmFilterStatus": "Update MITM Filter Status",
    "editFilterSuccess": "Successfully edited {editFilterName}",
    "updateMitmFilterFailed": "Failed to update MITM filter:",
    "updateHijackFilterStatus": "Update Hijack Filter Status",
    "updateHijackFilterFailed": "Failed to update Hijack Filter:",
    "getMitmFiltersFailed": "Failed to get MITM filters:",
    "getHijackFiltersFailed": "Failed to get Hijack filters:",
    "saveFilterConfig": "Save Filter Config",
    "saveConditionalMitmConfig": "Save Conditional MITM Config",
    "pleaseEnterName": "Please enter a name",
    "saveSuccess": "Saved successfully",
    "nameAlreadyExists": "This name already exists",
    "basicConfig": "Basic Config",
    "advancedConfig": "Advanced Config",
    "exportConfig": "Export Config",
    "importConfig": "Import Config",
    "importFromJson": "Import from JSON",
    "resetFilter": "Reset Filter",
    "saveAndApply": "Save and Apply",
    "tip": "Tip:",
    "conditionMatchTip": "1. Data that meets the conditions will automatically jump to manual hijack view, and the rest of the data will be automatically released.",
    "basicConfigMatchTip": "2. All basic configuration items except Content-Type and file extension are matched by keyword by default. If you need regex and glob pattern matching, please configure in Advanced Config.",
    "basicConfigKeywordTip": "All basic configuration items except Content-Type and file extension are matched by keyword by default. If you need regex and glob pattern matching, please configure in Advanced Config.",
    "nameYourFilter": "Please name your {name} configuration...",
    "filter": "Filter",
    "edit_hijack_filter": "{{prefix}} Conditional Hijack",
    "edit_filter_config": "{{prefix}} Filter Config"
  },
  "ImportFileModal": {
    "importFileFormatInvalid": "The imported file does not meet the format requirements",
    "import_text": "You can drag a file into the box, or <input/> <button>click here</button> to upload. Direct code pasting is also supported."
  },
  "MitmFilterHistoryStore": {
    "historyStorage": "History Storage",
    "cannotDeleteEditingFilter": "Cannot delete {editFilterName} while it is being edited"
  },
  "MITMCertificateDownloadModal": {
    "yakitGMZSCertificate": "{yakit}-gmzs-certificate.crt.pem",
    "yakitCertificate": "{yakit}-certificate.crt.pem",
    "downloadCertificateForHttpsHijack": "Download Certificate for HTTPS Hijack",
    "downloadAndOpenLocally": "Download Locally and Open",
    "accessAfterSettingProxy": "Access after setting proxy: ",
    "autoDownloadCertificate": "Can automatically download certificate",
    "sslTlsCertificate": "SSL/TLS Certificate",
    "gmSslTlsCertificate": "GM SSL/TLS Certificate (Guomi)"
  },
  "ChromeLauncherButton": {
    "closeAllChromeProxySuccess": "Successfully closed all proxy-free Chrome instances",
    "closeAllChromeFailed": "Failed to close all Chrome instances:",
    "confirmEnableWithReplacementRules": "Replacement rules are enabled, which may affect hijacking. Are you sure you want to enable?",
    "goToSettings": "Go to Settings",
    "noConfigStart": "Start Proxy-Free",
    "closeAllNoConfigChrome": "Close All Proxy-Free Chrome Instances",
    "confirmStartNoConfig": "Confirm starting proxy-free Chrome with parameters"
  },
  "MITMChromeLauncher": {
    "chromeStartFailed": "Chrome failed to start: {e}. Please try selecting to start with default configuration.",
    "configureProxy": "Configure Proxy",
    "saveUserData": "Save User Data",
    "setNewPathForNewWindow": "To open a new window, please set a new path to store user data",
    "setStoragePath": "Set Storage Path",
    "selectStoragePath": "Select Storage Path",
    "pleaseSelectFolder": "Please select a folder",
    "startNoConfigChrome": "Start Proxy-Free Chrome",
    "startWithPresetParams": "Start with Preset Params",
    "startWithMinimalParams": "Start with Minimal Params",
    "moreParameters": "More Parameters",
    "browserParameterConfig": "Browser Parameter Config",
    "unsavedEditWarning": "There are unsaved edits. Please click the Save button.",
    "duplicateParameterName": "Duplicate parameter name exists:",
    "parameterNameNotFilled": "A parameter name is not filled",
    "start_proxy_tip": "This button will start a Chrome browser with the proxy already correctly configured (using the system Chrome browser configuration) <br /><mark>No additional proxy activation is required from the user</mark>, and it separates the testing browser from the daily-use browser",
    "ignore_cert_tip": "<mark>Note:</mark><br/>The proxy-free browser has enabled <code>{{flag}}</code><br/>This option is <mark>effective</mark> and will ignore all certificate errors. <mark>It is only recommended to enable it for security testing</mark>",
    "preset_param_tip": "Preset parameters allow configuring enabled parameters and values in 'More Parameters'. Minimal parameters cannot be configured. If starting with preset parameters <error>fails</error>, please select to start with minimal parameters."
  },
  "ChromeLauncherParamsSet": {
    "confirmRestoreDefaultParams": "Confirm Restore Default Parameters",
    "restoreAllParamsWarning": "Are you sure you want to restore all parameters to their default state? All custom settings will be lost.",
    "defaultParamsRestored": "Default parameters restored",
    "parameterName": "Parameter Name",
    "variableValue": "Variable Value (empty for boolean type)",
    "enterParameterNameToSearch": "Enter parameter name to search",
    "restoreDefaultParameters": "Restore Default Parameters",
    "addNewParameter": "Add New Parameter"
  },
  "MITMServer": {
    "loadingMitmPlugin": "Loading MITM Plugin [{id}]",
    "startMitmPluginSuccess": "MITM Plugin started successfully",
    "startMitmPluginFailed": "Failed to start MITM Plugin:",
    "plugin": "Plugin"
  },
  "PluginGroup": {
    "pluginGroup": "Plugin Group",
    "addGroup": "Add Group",
    "pluginsRemovedFromGroup": "{value1} plugins removed from group \"{value2}\"",
    "pluginsAddedToGroup": "{value1} plugins added to group \"{value2}\""
  },
  "PluginSearch": {
    "getPluginGroupFailed": "Failed to get plugin group:",
    "keyword": "Keyword",
    "fullTextSearch": "Full Text Search"
  },
  "MITMPluginLocalList": {
    "getOrImportPluginsTip": "You can get official cloud plugins with one click, or import external plugin sources",
    "getCloudPlugins": "Get Cloud Plugins",
    "importPluginSource": "Import Plugin Source"
  },
  "YakitGetOnlinePlugin": {
    "stopDownload": "Stop Download:",
    "cloudPluginDownloading": "Cloud plugins downloading..."
  },
  "MITMYakScriptLoader": {
    "cancelViewPluginTraffic": "Cancel viewing this plugin's traffic",
    "viewPluginTraffic": "View this plugin's traffic",
    "sendToHotReloadForDebug": "Send to [Hot Reload] to debug code?",
    "sourceCode": "Source Code",
    "helpInfo": "Help Info"
  },
  "MitmHasParamsDrawer": {
    "parameterSettings": "Parameter Settings:"
  },
  "MitmHasParamsForm": {
    "jsonSchemaValidationFailed": "jsonSchema validation failed"
  },
  "MITMPluginHijackContent": {
    "all": "All",
    "enabled": "Enabled",
    "hotReload": "Hot Reload",
    "pluginTracking": "Plugin Tracking",
    "startMitmPluginSuccess": "MITM Plugin started successfully",
    "updateMitmPluginStatusFailed": "Failed to update MITM plugin status:",
    "saveLocalPluginSuccess": "Local plugin saved successfully",
    "savePluginFailed": "Failed to save plugin:",
    "updateTemplateSuccess": "Successfully updated template {tempName}",
    "updateTemplateFailed": "Failed to update template {tempName}:",
    "engineConsole": "Engine Console",
    "mitmInteractiveHijackV1NotSupported": "MITM Interactive Hijack v1 is not supported yet",
    "interactivePlugin": "Interactive Plugin",
    "passivePlugin": "Passive Plugin",
    "confirmResetHotReloadCode": "Confirm resetting hot reload code?",
    "updateAndSaveCurrentTemplate": "Update current template and save",
    "saveAsNewTemplate": "Save as New Template",
    "stopSuccess": "Stopped successfully",
    "enterPluginNameToSearch": "Enter plugin name to search",
    "pluginName": "Plugin Name:",
    "saveSourceCode": "Save Source Code"
  },
  "PluginTrace": {
    "pluginName": "Plugin Name",
    "hookName": "Hook Name",
    "status": "Status",
    "callParameters": "Call Parameters",
    "startTime": "Start Time{colon}",
    "durationMs": "Duration (ms)",
    "errorMessage": "Error Message",
    "pluginTracking": "Plugin Tracking",
    "pluginTrackingTip": "Enable tracking to view the specific execution status and failure reasons of plugins",
    "startTracking": "Start Tracking",
    "enterPluginOrHookNameToSearch": "Enter plugin name or Hook name to search",
    "totalCount": "Total Count",
    "stopTracking": "Stop Tracking",
    "listNotFound": "List not found, unable to locate",
    "statusCompletedAndRemoved": ": Status completed and automatically removed from the list, unable to locate"
  },
  "ImportLocalPlugin": {
    "importLocalPluginSuccess": "Local plugin imported successfully",
    "pluginSource": "Plugin Source",
    "proxy": "Proxy",
    "accessRepoViaProxy": "Access code repositories that are inaccessible from mainland China via proxy: e.g., http://127.0.0.1:7890",
    "localPluginPath": "Local Plugin Path",
    "enterLocalPluginPath": "Please enter the local plugin path",
    "password": "Password",
    "nucleiPoCLocalPath": "Nuclei PoC Local Path",
    "pluginID": "Plugin ID",
    "enterPluginID": "Please enter plugin IDs, separated by 'commas' or 'new lines'...",
    "importOnlineNuclei": "Import Online Nuclei",
    "enterNucleiPoCLocalPath": "Please enter the Nuclei PoC local path",
    "importLocalNuclei": "Import Local Nuclei",
    "pluginImportSuccess": "Plugin imported successfully",
    "pluginImportMethod": "Plugin Import Method",
    "externalResourceWarning": "Importing external resources has potential risks and may introduce malicious code or payloads, leading to data leaks, system compromises, and other serious consequences. Please carefully consider the necessity of importing external resources and ensure the source is trustworthy and the content is safe. If you must use external resources, it is recommended to prioritize official, secure versions or write your own controllable data sources. Additionally, please keep your system and software up to date, promptly fix known vulnerabilities, and maintain daily security protection.",
    "onlineNuclei": "Online Nuclei",
    "localPlugin": "Local Plugin",
    "localNuclei": "Local Nuclei"
  },
  "MITMFilters": {
    "includeHostname": "Include Hostname",
    "excludeHostname": "Exclude Hostname",
    "includeUrlPath": "Include URL Path",
    "uriMatchExplanation": "Can be understood as URI matching, e.g., /main/index.php?a=123",
    "excludeUrlPath": "Exclude URL Path",
    "uriFilterExplanation": "Can be understood as URI filtering, e.g., /main/index",
    "includeFileExtension": "Include File Extension",
    "excludeFileExtension": "Exclude File Extension",
    "excludeContentType": "Exclude Content-Type",
    "excludeHttpMethod": "Exclude HTTP Method"
  },
  "MITMAdvancedFilters": {
    "addAdvancedConfig": "Add Advanced Config",
    "noConditionSet": "No condition set yet",
    "completeExistingConditionBeforeAdding": "Please complete the configuration of the existing condition before adding a new one",
    "rule": "Rule"
  },
  "MITMAdvancedFiltersItem": {
    "completeExistingConditionBeforeAdding": "Please complete the configuration of the existing condition before adding a new one",
    "usageScope": "Usage Scope",
    "matchType": "Match Type",
    "regex": "Regex",
    "excludeHostnames": "Exclude Hostnames",
    "includeHostnames": "Include Hostnames",
    "excludeUris": "Exclude URL Paths",
    "includeUris": "Include URL Paths",
    "excludeMethods": "Exclude HTTP Methods"
  },
  "MITMRule": {
    "request": "Request",
    "response": "Response",
    "execution_order": "Execution Order",
    "rule_name": "Rule Name",
    "rule_content": "Rule Content",
    "replacement_result": "Replacement Result",
    "http_header_cookie_priority_tip": "HTTP Header and HTTP Cookie have a higher priority and will overwrite the body content",
    "on_off": "On/Off",
    "discard_result": "Discard Result",
    "enable_substitute_then_discard_tip": "After enabling substitution, you can discard the current request/response",
    "auto_resend": "Auto Resend",
    "option_no_replace_request_tip": "This option only applies to requests. When enabled, the (request) packet will not be replaced, and the substituted result will be sent as an extra packet",
    "rule_scope": "Rule Scope",
    "select_request_or_response_header_body_tip": "After selecting request or response, at least one of Header and Body must be selected",
    "effective_url": "Effective URL",
    "hit_color": "Hit Color",
    "append_tag": "Append Tag",
    "replace_rule_effect_warning": "A replacement rule has been detected. This may affect interception. Are you sure you want to enable it?",
    "drag_disabled_tip": "Dragging is disabled. You can only drag rules within the same status",
    "save_rule_and_close_prompt": "Do you want to save the rule content and close the pop-up window?",
    "content_rule_configuration": "Content Rule Configuration",
    "official_website": "Official Website",
    "existing_mitm_content_rules": "Rules",
    "total_rules_count": "Total {count}",
    "no_replace_all": "No Replacement for All",
    "add_rule": "Add Rule",
    "default_Configuration": "Default Configuration"
  },
  "RuleExportAndImportButton": {
    "import_configuration": "Import",
    "export_configuration": "Export",
    "export_configuration_json": "Export Configuration JSON"
  },
  "MITMRuleImport": {
    "please_enter_data": "Please enter data!",
    "import_from_json": "Import from JSON",
    "copy_json_into_box_tip": "You can copy JSON code into the box below",
    "use_default_configuration": "Use default configuration",
    "overwrite_existing_rules": "Overwrite existing rules"
  },
  "MITMRuleFromModal": {
    "edit_rule": "Edit Rule",
    "add_rule": "Add Rule",
    "add_this_rule": "Add this Rule",
    "rule_group": "Rule Group",
    "group_matching_tip": "Enter 0 to match all; enter a number to match the entered group; leave blank to match the first group by default",
    "replacement_result": "Replacement Result",
    "http_header_cookie_priority_tip": "HTTP Header and HTTP Cookie have a higher priority and will overwrite the body content",
    "text": "Text",
    "enter_content_to_replace_tip": "Enter the content you want to replace, can be empty~",
    "effective_url": "Effective URL",
    "url_specific_rule_tip": "The rule will only be effective for this URL; regular expressions are supported",
    "hit_color": "Hit Color",
    "tag": "Tag"
  },
  "ExtractRegular": {
    "extract_selection_data_error": "Error extracting selection data:",
    "cannot_generate_data_extraction_rule": "Cannot generate data extraction rule:"
  },
  "ExtraHTTPSelect": {
    "already_set_extra_count_tip": "Already set {{len}} extra {{tip}}"
  },
  "InputHTTPHeaderForm": {
    "enter_new_http_header": "Enter new HTTP Header",
    "set_this_header": "Set this Header"
  },
  "InputHTTPCookieForm": {
    "enter_new_cookie_value": "Enter new Cookie value",
    "advanced_configuration": "Advanced Configuration",
    "cookie_https_only": "Allow Cookie only on HTTPS",
    "samesite_policy": "SameSite Policy",
    "default_policy": "Default Policy",
    "lax_policy": "Lax Policy",
    "strict_policy": "Strict Policy",
    "do_not_set": "Do Not Set",
    "expires_timestamp": "Expires Timestamp",
    "add_this_cookie": "Add this Cookie"
  },
  "RuleContent": {
    "use_right_tool_generate_regex": "You can use the tool on the right to automatically generate a regex",
    "auto_extract_regex": "Auto-extract Regex",
    "select_in_editor_generate_regex": "Select content in the editor to automatically generate a regex"
  },
  "AgentConfigModal": {
    "proxy_auth_config": "Configure Proxy Authentication",
    "protocol": "Protocol",
    "address": "Address",
    "please_enter_address": "Please enter the address",
    "invalid_address_format": "Invalid address format",
    "example_address": "E.g.: 127.0.0.1:7890",
    "username": "Username",
    "please_enter_username": "Please enter the username",
    "password": "Password",
    "please_enter_password": "Please enter the password"
  }
}